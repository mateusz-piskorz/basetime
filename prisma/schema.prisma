generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PROJECT_COLOR {
  GRAY
  BLUE
  ORANGE
}

enum MEMBER_ROLE {
  OWNER
  MANAGER
  EMPLOYEE
}

enum INVITATION_STATUS {
  SENT
  ACCEPTED
  REJECTED
  CANCELED
}

enum CURRENCY {
  PLN
  EUR
  USD
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session     Session[]
  Members     Member[]
  Invitations Invitation[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  currency  CURRENCY
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Members     Member[]
  Invitations Invitation[]
  Projects    Project[]
  TimeEntries TimeEntry[]
}

model Member {
  id        String      @id @default(cuid())
  role      MEMBER_ROLE
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId         String
  organizationId String
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  HourlyRates    HourlyRate[]
  Projects       Project[]
  TimeEntries    TimeEntry[]
}

model Invitation {
  id        String            @id @default(cuid())
  status    INVITATION_STATUS
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  organizationId String
  userId         String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HourlyRate {
  id        String   @id @default(cuid())
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId String
  Member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model TimeEntry {
  id        String    @id @default(cuid())
  name      String
  start     DateTime
  end       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  memberId       String
  projectId      String?
  taskId         String?
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  Project        Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id               String        @id @default(cuid())
  name             String
  estimatedMinutes Int?
  color            PROJECT_COLOR
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Members        Member[]

  TimeEntries TimeEntry[]
}
