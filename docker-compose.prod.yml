volumes:
  postgres_data_prod:
  minio_data_prod:

networks:
  btnetworkprod:

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MINIO_ENDPOINT: ${MINIO_ENDPOINT}
    environment:
      NEXT_PUBLIC_URL: ${NEXT_PUBLIC_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_SSL: ${MINIO_SSL}
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - 3000:3000
    networks:
      - btnetworkprod

  db:
    image: postgres:17.6
    container_name: db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - btnetworkprod

minio:
  image: quay.io/minio/minio:latest
  command: server /data --console-address ":9001"
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  volumes:
    - minio_data_prod:/var/lib/minio/data
  networks:
    - btnetworkprod
  healthcheck:
    test: ['CMD', 'mc', 'ready', 'local']
    interval: 5s
    timeout: 5s
    retries: 5
  ports:
    - 9000:9000

minio-create-bucket:
  image: minio/mc:latest
  depends_on:
    minio:
      condition: service_healthy
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    MINIO_USER: ${MINIO_USER}
    MINIO_PASSWORD: ${MINIO_PASSWORD}
  volumes:
    - ./scripts/minio-setup-buckets.sh:/etc/scripts/minio-setup-buckets.sh
  networks:
    - btnetworkprod
  entrypoint: /etc/scripts/minio-setup-buckets.sh
